import 'package:edtf/edtf.dart';
import 'package:test/test.dart';

void main() {
  group('A group of tests', () {
    Awesome awesome;

    setUp(() {
      awesome = Awesome();
    });

    test('First Test', () {
      expect(awesome.isAwesome, isTrue);
    });
    test('Date parse test', () {
      ///                      Y-12019-%05-26~T15:34:06Z
      final dateParse = Edtf.parse('Y-12019-?05-26~T15:34:06Z');
      expect(dateParse.runtimeType, EdtfDate);
      final date = dateParse as EdtfDate;
      expect(date.year.value, -12019);
      expect(date.year.localApprox, false);
      expect(date.year.localUncert, false);
      expect(date.year.groupApprox, true);
      expect(date.year.groupUncert, false);
      expect(date.month.value, 5);
      expect(date.month.localApprox, false);
      expect(date.month.localUncert, true);
      expect(date.month.groupApprox, true);
      expect(date.month.groupUncert, false);
      expect(date.day.value, 26);
      expect(date.day.localApprox, true);
      expect(date.day.localUncert, false);
      expect(date.day.groupApprox, true);
      expect(date.day.groupUncert, false);
      expect(date.time.hour, 15);
      expect(date.time.minutes, 34);
      expect(date.time.seconds, 6);
      expect(date.time.shiftLevel, EdtfTime.shiftLevelUTC);
    });
    test('Date year parse test', () {
      final year1 = Edtf.parse('1234') as EdtfDate;
      assert(year1.year != null);
      assert(year1.month == null);
      assert(year1.day == null);
      assert(year1.time == null);
      expect(year1.year.value, 1234);
      expect(year1.year.exp, null);
      expect(year1.year.significance, null);
      expect(year1.year.unspecMask, '1234');
      expect(year1.year.localApprox, false);
      expect(year1.year.localUncert, false);
      expect(year1.year.groupApprox, false);
      expect(year1.year.groupUncert, false);
      final year2 = Edtf.parse('~-20XX?') as EdtfDate;
      assert(year2.year != null);
      assert(year2.month == null);
      assert(year2.day == null);
      assert(year2.time == null);
      expect(year2.year.value, -2000);
      expect(year2.year.exp, null);
      expect(year2.year.significance, null);
      expect(year2.year.unspecMask, '-20..');
      expect(year2.year.localApprox, true);
      expect(year2.year.localUncert, true);
      expect(year2.year.groupApprox, false);
      expect(year2.year.groupUncert, true);
      final year3 = Edtf.parse('-12X3E9S3%') as EdtfDate;
      assert(year3.year != null);
      assert(year3.month == null);
      assert(year3.day == null);
      assert(year3.time == null);
      expect(year3.year.value, -1203);
      expect(year3.year.exp, 9);
      expect(year3.year.significance, 3);
      expect(year3.year.unspecMask, '-12.3');
      expect(year3.year.localApprox, true);
      expect(year3.year.localUncert, true);
      expect(year3.year.groupApprox, true);
      expect(year3.year.groupUncert, true);
    });
    test('Interval parse test', () {
      final uninterval = Edtf.parse('/') as EdtfInterval;
      expect(uninterval.start, null);
      expect(uninterval.openStart, false);
      expect(uninterval.end, null);
      expect(uninterval.openEnd, false);
      final openinterval = Edtf.parse('../..') as EdtfInterval;
      expect(openinterval.start, null);
      expect(openinterval.openStart, true);
      expect(openinterval.end, null);
      expect(openinterval.openEnd, true);
      final ival = Edtf.parse('1900/2019') as EdtfInterval;
      expect(ival.start.year.value, 1900);
      expect(ival.openStart, false);
      expect(ival.end.year.value, 2019);
      expect(ival.openEnd, false);
    });
    test('Set parse tests', () {
      final oneOf = Edtf.parse('[1999, 2000, 2013..2017, 2019..]') as EdtfOneOf;
      expect(oneOf.values[0].runtimeType, EdtfDate);
      expect(oneOf.values[1].runtimeType, EdtfDate);
      expect(oneOf.values[2].runtimeType, EdtfInterval);
      expect(oneOf.values[3].runtimeType, EdtfInterval);
      expect((oneOf.values[0] as EdtfDate).year.value, 1999);
      expect((oneOf.values[1] as EdtfDate).year.value, 2000);
      expect((oneOf.values[2] as EdtfInterval).start.year.value, 2013);
      expect((oneOf.values[2] as EdtfInterval).end.year.value, 2017);
      expect((oneOf.values[3] as EdtfInterval).start.year.value, 2019);
      expect((oneOf.values[3] as EdtfInterval).openEnd, true);
    });

    test('Back-to-string tests', () {
      final e1_1 = Edtf.parse('1985-04-12');
      expect(e1_1.toString(), '1985-04-12');
      final e1_2 = Edtf.parse('1985-04');
      expect(e1_2.toString(), '1985-04');
      final e1_3 = Edtf.parse('1985');
      expect(e1_3.toString(), '1985');
      final e2_1 = Edtf.parse('1985-04-12T23:20:30');
      expect(e2_1.toString(), '1985-04-12T23:20:30');
      final e2_2 = Edtf.parse('1985-04-12T23:20:30Z');
      expect(e2_2.toString(), '1985-04-12T23:20:30Z');
      final e2_3 = Edtf.parse('1985-04-12T23:20:30-04');
      expect(e2_3.toString(), '1985-04-12T23:20:30-04');
      final e2_4 = Edtf.parse('1985-04-12T23:20:30+04:30');
      expect(e2_4.toString(), '1985-04-12T23:20:30+04:30');
      final e3_1 = Edtf.parse('1964/2008');
      expect(e3_1.toString(), '1964/2008');
      final e3_2 = Edtf.parse('2004-06/2006-08');
      expect(e3_2.toString(), '2004-06/2006-08');
      final e3_3 = Edtf.parse('2004-02-01/2005-02-08');
      expect(e3_3.toString(), '2004-02-01/2005-02-08');
      final e3_4 = Edtf.parse('2004-02-01/2005-02');
      expect(e3_4.toString(), '2004-02-01/2005-02');
      final e3_5 = Edtf.parse('2004-02-01/2005');
      expect(e3_5.toString(), '2004-02-01/2005');
      final e3_6 = Edtf.parse('2005/2006-02');
      expect(e3_6.toString(), '2005/2006-02');
      final e4_1 = Edtf.parse('Y170000002');
      expect(e4_1.toString(), 'Y170000002');
      final e4_2 = Edtf.parse('Y-170000002');
      expect(e4_2.toString(), 'Y-170000002');
      final e5_1 = Edtf.parse('2001-21');
      expect(e5_1.toString(), '2001-21');
      final e6_1 = Edtf.parse('1984?');
      expect(e6_1.toString(), '1984?');
      final e6_2 = Edtf.parse('2004-06~');
      expect(e6_2.toString(), '2004-06~');
      final e6_3 = Edtf.parse('2004-06-11%');
      expect(e6_3.toString(), '2004-06-11%');
      final e7_1 = Edtf.parse('201X');
      expect(e7_1.toString(), '201X');
      final e7_2 = Edtf.parse('20XX');
      expect(e7_2.toString(), '20XX');
      final e7_3 = Edtf.parse('2004-XX');
      expect(e7_3.toString(), '2004-XX');
      final e7_4 = Edtf.parse('1985-04-XX');
      expect(e7_4.toString(), '1985-04-XX');
      final e7_5 = Edtf.parse('1985-XX-XX');
      expect(e7_5.toString(), '1985-XX-XX');
      final e8_1 = Edtf.parse('1985-04-12/..');
      expect(e8_1.toString(), '1985-04-12/..');
      final e8_2 = Edtf.parse('1985-04/..');
      expect(e8_2.toString(), '1985-04/..');
      final e8_3 = Edtf.parse('1985/..');
      expect(e8_3.toString(), '1985/..');
      final e8_4 = Edtf.parse('../1985-04-12');
      expect(e8_4.toString(), '../1985-04-12');
      final e8_5 = Edtf.parse('../1985-04');
      expect(e8_5.toString(), '../1985-04');
      final e8_6 = Edtf.parse('../1985');
      expect(e8_6.toString(), '../1985');
      final e8_7 = Edtf.parse('1985-04-12/');
      expect(e8_7.toString(), '1985-04-12/');
      final e8_8 = Edtf.parse('1985-04/');
      expect(e8_8.toString(), '1985-04/');
      final e8_9 = Edtf.parse('1985/');
      expect(e8_9.toString(), '1985/');
      final e8_10 = Edtf.parse('/1985-04-12');
      expect(e8_10.toString(), '/1985-04-12');
      final e8_11 = Edtf.parse('/1985-04');
      expect(e8_11.toString(), '/1985-04');
      final e8_12 = Edtf.parse('/1985');
      expect(e8_12.toString(), '/1985');
      final e9_1 = Edtf.parse('-1985');
      expect(e9_1.toString(), '-1985');
      final e10_1 = Edtf.parse('Y-17E7');
      expect(e10_1.toString(), 'Y-17E7');
      final e11_1 = Edtf.parse('1950S2');
      expect(e11_1.toString(), '1950S2');
      final e11_2 = Edtf.parse('Y171010000S3');
      expect(e11_2.toString(), 'Y171010000S3');
      final e11_3 = Edtf.parse('Y3388E2S3');
      expect(e11_3.toString(), 'Y3388E2S3');
      final e12_1 = Edtf.parse('2001-34');
      expect(e12_1.toString(), '2001-34');
      final e13_1 = Edtf.parse('[1667,1668,1670..1672]');
      expect(e13_1.toString(), '[1667,1668,1670..1672]');
      final e13_2 = Edtf.parse('[..1760-12-03]');
      expect(e13_2.toString(), '[..1760-12-03]');
      final e13_3 = Edtf.parse('[1760-12..]');
      expect(e13_3.toString(), '[1760-12..]');
      final e13_4 = Edtf.parse('[1760-01,1760-02,1760-12..]');
      expect(e13_4.toString(), '[1760-01,1760-02,1760-12..]');
      final e13_5 = Edtf.parse('[1667,1760-12]');
      expect(e13_5.toString(), '[1667,1760-12]');
      final e13_6 = Edtf.parse('[..1984]');
      expect(e13_6.toString(), '[..1984]');
      final e13_7 = Edtf.parse('{1667,1668,1670..1672}');
      expect(e13_7.toString(), '{1667,1668,1670..1672}');
      final e13_8 = Edtf.parse('{1960,1961-12}');
      expect(e13_8.toString(), '{1960,1961-12}');
      final e13_9 = Edtf.parse('{..1984}');
      expect(e13_9.toString(), '{..1984}');
      final e14_1 = Edtf.parse('2004-06-11%');
      expect(e14_1.toString(), '2004-06-11%');
      final e14_2 = Edtf.parse('2004-06~-11');
      expect(e14_2.toString(), '2004-06~-11');
      final e14_3 = Edtf.parse('2004?-06-11');
      expect(e14_3.toString(), '2004?-06-11');
      final e14_4 = Edtf.parse('?2004-06-~11');
      expect(e14_4.toString(), '?2004-06-~11');
      final e14_5 = Edtf.parse('2004-%06-11');
      expect(e14_5.toString(), '2004-%06-11');
      final e15_1 = Edtf.parse('156X-12-25');
      expect(e15_1.toString(), '156X-12-25');
      final e15_2 = Edtf.parse('15XX-12-25');
      expect(e15_2.toString(), '15XX-12-25');
      final e15_3 = Edtf.parse('XXXX-12-XX');
      expect(e15_3.toString(), 'XXXX-12-XX');
      final e15_4 = Edtf.parse('1XXX-XX');
      expect(e15_4.toString(), '1XXX-XX');
      final e15_5 = Edtf.parse('1XXX-12');
      expect(e15_5.toString(), '1XXX-12');
      final e15_6 = Edtf.parse('1984-1X');
      expect(e15_6.toString(), '1984-1X');
      final e16_1 = Edtf.parse('2004-06-~01/2004-06-~20');
      expect(e16_1.toString(), '2004-06-~01/2004-06-~20');
      final e16_2 = Edtf.parse('2004-06-XX/2004-07-03');
      expect(e16_2.toString(), '2004-06-XX/2004-07-03');
    });
  });
}
